# Classe per l'analisi dei motivi genetici
HO AGGIUNTO UNA CLASSE ASTRATTA PERCHè POTREI NON VOLER LAVORARE CON UN DATA FRAME MA CON UNA STRINGA, O QUALSIASI COSA, QUINDI FACCIAMO IN MODO CHE IL NOSTRO SIA UN CASO PARTICOLARE
class MotifAnalyser(ABC):
    def __init__(self, data):
        self.__data = data
        
    @abstractmethod
    def find_motif(self, motif):
        pass
    
class SequenceMotif(MotifAnalyser):
    def __init__(self, DataFrame): #accetta un dataframe
        self.__DataFrame = DataFrame
    
    def extract_motifs(self, sequence, motif_length):
'''questo metodo ritorna una lista di motivi di una data lungezza trovati in una data sequenza'''
    return [sequence[i:i+motif_length] for i in range(len(sequence) - motif_length + 1)]

    def return_motifs(self, extracted_motifs, minimum):
      motifs =extracted_motifs
      motif_counts = dict(Counter(motifs))
      recurrent_motifs = {motif: count for motif, count in motif_counts.items() if count > minimum}
      motifs_df=df = pd.DataFrame(list(recurrent_motifs.items()), columns=["motif", "count"]).set_index("motif")
      return motifs_df
        
    def find_motif(self, motif):
        """Cerca un motivo genetico specifico in tutte le sequenze."""
        motif=motif.upper()
        results = []
        for _, row in self.__DataFrame.iterrows():
            count = row["Sequence"].count(motif)
            results.append((row["Identifier"], motif, count))
        return pd.DataFrame(results, columns=["Identifier", "Motif", "Occurrences"])
    
try_MotAnal=SequenceMotif(DataFrame) #dove DataFrame è il dataframe creato con FastaParser e gettato attraverso il metodo get
print(try_MotAnal.count_motif('ACAT'))
print(try_MotAnal.find_motif_seq('acat', DataFrame.loc[99, 'Sequence']))
print(spacer)
