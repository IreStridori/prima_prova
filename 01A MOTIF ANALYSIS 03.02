import pandas as pd
from abc import ABC, abstractmethod
from collections import Counter

#CLASSE ASTRATTA PERCHè POTREI NON VOLER LAVORARE CON UN DATA FRAME MA CON UNA STRINGA, O QUALSIASI COSA, QUINDI FACCIAMO IN MODO CHE IL NOSTRO SIA UN CASO PARTICOLARE
class MotifAnalyser(ABC):
    def __init__(self, data):
        self._data = data #nel nostro caso il dato sarà il dataframe

    @abstractmethod
    def find_motif(self, motif):
        pass

# Classe per l'analisi dei motivi genetic
class SequenceMotif(MotifAnalyser): #inerita init da superclasse
    #Estrae tutte le subsequenze di lunghezza motif_length dalla sequence e restituisce una lista di motivi.
    # Conta le occorrenze di ciascun motivo (usa Counter() di collections). Filtra i motivi che compaiono più di minimum volte. Restituisce un DataFrame con i motivi e la loro frequenza.
    def extract_motifs(self, sequence, motif_length, minimum):
        motifs = [sequence[i:i + motif_length] for i in range(len(sequence) - motif_length + 1)]
        motif_counts = dict(Counter(motifs))
        recurrent_motifs = {motif: count for motif, count in motif_counts.items() if count >= minimum}
        motifs_df = pd.DataFrame(list(recurrent_motifs.items()), columns=["motif", "count"]).set_index("motif")
        return motifs_df

    #Cerca un motivo genetico specifico in tutte le sequenze del dataframe e ti dice quante volte l'ha trovato per ogni sequenza
    def find_motif(self, motif):
        motif = motif.upper()
        results = []
        for _, row in self._data.iterrows(): #!!!index
            count = row["Sequence"].count(motif)
            results.append((row["Identifier"], motif, count))
        return pd.DataFrame(results, columns=["Identifier", "Motif", "Occurrences"])

