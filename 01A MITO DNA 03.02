import pandas as pd
from abc import ABC, abstractmethod

# superclasse per sequenze
class GenomicEntity(ABC):
    def __init__(self,sequence, identifier=None, description=None):
        self._identifier = identifier #protected così che puoi accedere da mithochondrial dna
        self._description = description
        self._sequence = sequence

    def get_attributes_value(self):
        return self._identifier, self._description, self._sequence

    def length(self):
        return len(self._sequence)


# Classe per rappresentare il DNA mitocondriale
class MitochondrialDNA(GenomicEntity):

    def gc_content(self):
        """Calcola il contenuto GC della sequenza."""
        g_count = self._sequence.count("G")
        c_count = self._sequence.count("C")
        return (g_count + c_count) / len(self._sequence) * 100

    def extract_subseq_by_indexing(self, start, end):
        return self._sequence[start:end + 1]


try_mitoDNA = MitochondrialDNA(*try_fasta_parser.get_seq(3))
print('LA VITA è BELLA', try_mitoDNA.get_attributes_value())
print('CICCIO GAMER the length of the seq is:', try_mitoDNA.length())
print('PINCO PALLO the gc count of this seq is:', try_mitoDNA.gc_content())
print('POMODORO', try_mitoDNA.extract_subseq_by_indexing(273, 690))
