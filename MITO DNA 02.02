import pandas as pd
from abc import ABC, abstractmethod
from Bio.Align import PairwiseAligner

#superclasse per sequenze
class GenomicEntity(ABC):
    def __init__(self, DataFrame, index):
        self._identifier = DataFrame.loc[index, 'Identifier']
        self._description = DataFrame.loc[index, 'Description']
        self._sequence = DataFrame.loc[index, 'Sequence']
        
    def get_attributes_value(self):
        return self._identifier, self._description, self._sequence
    
    def length(self):
        return len(self._sequence)
    

# Classe per rappresentare il DNA mitocondriale
class MitochondrialDNA(GenomicEntity):
        
    def gc_content(self):
        """Calcola il contenuto GC della sequenza."""
        g_count = self._sequence.count("G")
        c_count = self._sequence.count("C")
        return (g_count + c_count) / len(self._sequence) * 100

try_mitoDNA=MitochondrialDNA(DataFrame, 3)
print(try_mitoDNA.get_attributes_value())
print('the length of the seq is:', try_mitoDNA.length())
print('the gc count of this seq is:', try_mitoDNA.gc_content())
