pip install biopython
import pandas as pd
from abc import ABC, abstractmethod
from Bio import pairwise2
from Bio.pairwise2 import format_alignment

# Decoratore per validare la presenza del dataset caricato
def ensure_data_loaded(func):
    def wrapper(self, *args, **kwargs):
        if self.data is None:
            raise ValueError("Nessun dataset caricato. Caricare un file FASTA prima di eseguire l'operazione.")
        return func(self, *args, **kwargs)
    return wrapper

# Classe per il parsing del file FASTA
class FastaParser:
    def __init__(self):
        self.data = None

    def parse_fasta(self, file_path):
        """Effettua il parsing del file FASTA e memorizza i dati in un DataFrame."""
        sequences = []
        with open(file_path, "r") as file:
            identifier, description, sequence = None, None, []
            for line in file:
                line = line.strip()
                if line.startswith(">"):
                    if identifier:
                        sequences.append((identifier, description, ''.join(sequence)))
                    header_parts = line[1:].split(" ", 1)
                    identifier = header_parts[0]
                    description = header_parts[1] if len(header_parts) > 1 else ""
                    sequence = []
                else:
                    sequence.append(line)
            if identifier:
                sequences.append((identifier, description, ''.join(sequence)))

        self.data = pd.DataFrame(sequences, columns=["Identifier", "Description", "Sequence"])

    @ensure_data_loaded
    def get_summary(self):
        """Restituisce un riepilogo del dataset."""
        return self.data.describe(include="all")

#superclasse per sequenze
class GenomicEntity(ABC):
    def __init__(self, identifier, description, sequence):
        self.identifier = identifier
        self.description = description
        self.sequence = sequence

    def length(self):
        return len(self.sequence)
    

# Classe per rappresentare il DNA mitocondriale
class MitochondrialDNA(GenomicEntity):
    def __init__(self, identifier, description, sequence):
        self.identifier = identifier
        self.description = description
        self.sequence = sequence

    def gc_content(self):
        """Calcola il contenuto GC della sequenza."""
        g_count = self.sequence.count("G")
        c_count = self.sequence.count("C")
        return (g_count + c_count) / len(self.sequence) * 100


# Classe per l'analisi dei motivi genetici
class MotifAnalysis:
    def __init__(self, fasta_parser):
        self.fasta_parser = fasta_parser

    @ensure_data_loaded
    def find_motif(self, motif):
        """Cerca un motivo genetico specifico in tutte le sequenze."""
        results = []
        for _, row in self.fasta_parser.data.iterrows():
            count = row["Sequence"].count(motif)
            results.append((row["Identifier"], motif, count))
        return pd.DataFrame(results, columns=["Identifier", "Motif", "Occurrences"])

#classe per l'allineamento
class SequenceAlignment:
    def __init__(self, seq1, seq2):
        """Inizializza l'oggetto di allineamento con due sequenze."""
        self.seq1 = seq1
        self.seq2 = seq2

    def global_alignment(self):
        """Esegue l'allineamento globale utilizzando il metodo di Needleman-Wunsch."""
        alignments = pairwise2.align.globalxx(self.seq1, self.seq2)
        return alignments

    def local_alignment(self):
        """Esegue l'allineamento locale utilizzando il metodo di Smith-Waterman."""
        alignments = pairwise2.align.localxx(self.seq1, self.seq2)
        return alignments

    def format_alignment(self, alignments, n=1):
        """Formatta e restituisce i primi N risultati di allineamento."""
        results = []
        for alignment in alignments[:n]:
            results.append(format_alignment(*alignment))
        return "\n".join(results)

#uso nel main dell'alligner
# Sequenze di esempio
seq1 = "GATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGG"
seq2 = "GAGCCCGTCTAAACTCCTCTATGTGTCTATGTCCTTGCTTTGGCGGTTTAGCCTTCACAGATCACCAACG"

# Creazione dell'oggetto di allineamento
aligner = SequenceAlignment(seq1, seq2)

# Allineamento globale
print("=== Allineamento Globale ===")
global_alignments = aligner.global_alignment()
print(aligner.format_alignment(global_alignments, n=1))  # Mostra il primo risultato

# Allineamento locale
print("=== Allineamento Locale ===")
local_alignments = aligner.local_alignment()
print(aligner.format_alignment(local_alignments, n=1))  # Mostra il primo risultato
