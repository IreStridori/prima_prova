from abc import ABC, abstractmethod
import pandas as pd
from Bio import pairwise2


# Superclasse astratta per il parsing dei dati
class DataParser(ABC):
    @abstractmethod
    def parse(self, file_path):
        pass


# Sottoclasse concreta per il parsing dei file FASTA
class FastaParser(DataParser):
    def parse(self, file_path):
        rows = []  # Lista di dizionari
        current_id = None
        current_description = None
        current_sequence = []

        with open(file_path, "r") as file:
            for line in file:
                if line.startswith(">"):  # Nuovo header
                    if current_id:  # Se abbiamo già una sequenza, salviamola
                        rows.append({
                            "ID": current_id,
                            "Description": current_description,
                            "Sequence": "".join(current_sequence)
                        })
                    header_parts = line[1:].strip().split(" ", 1)
                    current_id = header_parts[0]
                    current_description = header_parts[1] if len(header_parts) > 1 else ""
                    current_sequence = []
                else:  # Parte della sequenza
                    current_sequence.append(line.strip())

            # Aggiungere l'ultima sequenza al termine del file
            if current_id:
                rows.append({
                    "ID": current_id,
                    "Description": current_description,
                    "Sequence": "".join(current_sequence)
                })

        # Creare un DataFrame direttamente dalla lista di dizionari
        return pd.DataFrame(rows)


# Superclasse per rappresentare sequenze generali
class Sequence:
    def __init__(self, sequence):
        self.sequence = sequence

    def length(self):
        return len(self.sequence)


# Sottoclasse per le sequenze di DNA
class DNASequence(Sequence):
    def gc_content(self):
        gc_count = self.sequence.count("G") + self.sequence.count("C")
        return (gc_count / len(self.sequence)) * 100 if self.sequence else 0.0


# Classe per l'analisi di motivi
class MotifAnalyser:
    def __init__(self, sequences):
        self.sequences = sequences

    def search_motif(self, motif):
        results = []
        for idx in range(len(self.sequences)):  # Uso esplicito degli indici
            seq = self.sequences[idx]
            positions = []
            start = 0
            while (start := seq.find(motif, start)) != -1:
                positions.append(start)
                start += 1
            results.append({"Sequence Index": idx, "Motif Positions": positions})
        return results
    
    '''
    for idx, seq in enumerate(self.sequences):
    positions = []
    start = 0
    while (start := seq.find(motif, start)) != -1:
        positions.append(start)
        start += 1
    results.append({"Sequence Index": idx, "Motif Positions": positions})
    '''


# Classe per l'allineamento delle sequenze
class SequenceAligner:
    def __init__(self, seq1, seq2):
        self.seq1 = seq1
        self.seq2 = seq2

    def align(self):
        alignments = pairwise2.align.globalxx(self.seq1, self.seq2)
        return alignments
    
    '''
    def align(self):
    alignments = pairwise2.align.globalxx(self.seq1, self.seq2)
    return alignments  # Puoi filtrare per restituire il più significativo se necessario
    '''


# Esempio di utilizzo
if __name__ == "__main__":
    # Parsing del file FASTA
    fasta_parser = FastaParser()
    fasta_data = fasta_parser.parse("example.fasta")
    print("FASTA Data:")

    # Analisi di una sequenza DNA
    dna_seq = DNASequence(fasta_data.iloc[0]["Sequence"])
    print("Length:", dna_seq.length())
    print("GC Content:", dna_seq.gc_content())

    # Analisi di motivi
    motif_analyser = MotifAnalyser(fasta_data["Sequence"].tolist())
    motif_results = motif_analyser.search_motif("GATC")
    print("Motif Analysis Results:", motif_results)

    # Allineamento di sequenze
    aligner = SequenceAligner(fasta_data.iloc[0]["Sequence"], fasta_data.iloc[1]["Sequence"])
    alignment_results = aligner.align()
    print("Alignment Results:", alignment_results[0])
    
    '''
    
    alignment_results = aligner.align()
print("Alignment Results:")
for alignment in alignment_results:
    print(pairwise2.format_alignment(*alignment))
    
    '''
