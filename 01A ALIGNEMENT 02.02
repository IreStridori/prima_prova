# Classe per l'allineamento
class SequenceAlignment:
    def __init__(self, seq1, seq2):
        """Inizializza l'oggetto di allineamento con due sequenze."""
        self.__seq1 = seq1
        self.__seq2 = seq2
        self.__aligner = PairwiseAligner()
        self.__aligner.mode = 'global'  # Imposta l'allineamento globale di default

    def global_alignment(self):
        """Esegue l'allineamento globale utilizzando il metodo di Needleman-Wunsch."""
        self.__aligner.mode = 'global'
        alignments = self.__aligner.align(self.__seq1, self.__seq2)
        return alignments

    def local_alignment(self):
        """Esegue l'allineamento locale utilizzando il metodo di Smith-Waterman."""
        self.__aligner.mode = 'local'
        alignments = self.__aligner.align(self.__seq1, self.__seq2)
        return alignments

    def format_alignment(self, alignments, n=1):
        """Formatta e restituisce i primi N risultati di allineamento."""
        results = []
        for alignment in alignments[n]:
            results.append(str(alignment))
        return "\n".join(results)
    
print(DataFrame.loc[1, 'Sequence'])
print(DataFrame.loc[66, 'Sequence'])
print(len('GAGCCCGTCTAAACTCCTCTATGTGTCTATGTCCTTGCTTTGGCGGTTTAGCCTTCACAGATCACCAACGGAGCCCGTCTAAACTCCTCTATGTGTCTATGTCCTTGCTTTGGCGGTTTAGCCTTCACAGATCACCAACGGAGCCCGTCTAAACTCCTCTATGTGTCTATGTCCTTGCTTTGGCGGTTTAGCCTTCACAGATCACCAACGGAGCCCGTCTAAACTCCTCTATGTGTCTATGTCCTTGCTTTGGCGGTTTAGCCTTCACAGATCACCAACGGAGCCCGTCTAAACTCCTCTATGTGTCTATGTCCTTGCTTTGGCGGTTTAGCCTTCACAGATCACCAACGGAGCCCGTCTAAACTCCTCTATGTGTCTATGTCCTTGCTTTGGCGGTTTAGCCTTCACAGATCACCAACG'))
aligner = SequenceAlignment('TAAGTAATCTTGCGCTACACCTGCCTGCTCAAGTTTTTCCCACTACTGCTTAGCGGCATTACCTGGGGCTCTACTGACGTATCAGGGACCCAATCATATTGTAGGTACTGGTCCAACTCTGAGTCAACTAGCCTGCACCTGTGGTTTCTTGTCCGGCCTTGTAAGCCGTAAGGTGCAGACCCACTCGCAAACCCCTGAATATCCAAATCACTATCTACAAGCATCACTATTGACCGTTCGTGAAGGGCGTAATTCGAGGCCGATTTTCATTTCATGCCTCCCATATGCAATTCCACCCTAGATGATGACGGCATTACATGATACACGACTAGCTCAGTCGCACCCAGGACGCTCGCTAGGGGATCGCGACGACCTGCCGGTCTTCTAAGTTCATTAGGTACCCGAGTCGAAGGAATTCGAGATGCTAACTTGGTCTTCCACGATAGTGGAACGTGTCACGGGACAGCCTTACGTGGAATAATAAAGAGTAACCAAGTTGAAGTCGCCAAACTCGCTCACTTTCGTCTGTTATATAAGTGATGAGAAAGCGGTTACGGTCAGTTCAATAGGGACAGCGAGAGGATCGACGGTTAACTTTACTTCTGGCGGGCTAATGACAACTCTTCAAGACTTAGTCAGCTTTATGCCGCCATGGACTATTGACCGGACTGAAGGTATAGTTTAGGGGAAACATCTGATCCAGGCAGAAAAGTTATAACGTAAGGGCCGCAGCTCTATGGATAAACTTGTGGTATGGCTTTTATTGTCTGAGTATTGAGCCGCCCTGTTGGACAGAGAGCGCCAATCCTTGCCAACCTCGAGCTAGGTGTTCCAAGTCAAGTCTTAAAGGAGACCCGCCGAATACCCGTTCGATCACCTGAACGAATACTGTATACATTATCCACCTCGGACACCTAGTGTAGGGTTACCATGAGCATGATCTTTCGTCAAAATGGTGGCCCTATTCCAGCGAGCAGTTCCGGTTCGACACATAGGAGTC', 'TTGAAAGCAATCTTGATGATAGTGCATTTAGCCATCTCGCAAGGCCGGCGTAAAGTTTGGGCCGTTCATAGAGGACCGTATGCCCGGCAGACGCTTACTCGGACTAATTGGTTAGAGAGTGCGGGGCCCTTAGGACATTGGGAATGTCAGGAATGCGCGGCGGCTGCGGTCTGTTAACTGGCAATGAAAGTGAGTTTTCTGCATATTAGGGATCGGCACAATCTGCCGACCAGGGCTCTTCTGTGGCGAATTCCGTGACCTCCTAGTGAAAACGGGCAGCCGACCGCATAGAGATAACACAGCTGCATTGTTATTCTTGCGCTGGCGAATGTAACCGAACCTCTATCCGATCACCCTAAGTAGATCTTGCGCTAAAAGGGACTCGGGTGTGGTGGGCCTATTGCTAAAAACGTGCACCTACTCTTGGAGCCACGTTGAGGCGAGCCTTATCATATTAAATAATGATGATTGACAGTGACAAAAGTACCGACGACACAGATACCGAAAGACTTAATATTACGCAATCGGTTCCAGCGAGCCTCCTTAACCCGTCTTGCATGACCCCCTTTGCTGCGCGCGTGTGTGTTGTCAAGGTGTGCAGCGTGAGCGATGACGACGTGGGGTAAGTCGAGAATCAGAGGACGGAGCCGTGTACGCGCAAAAACCTGGGTACGGTCCATAAGCGGTAAGAGTACAATTCTACACCAAGTTCTTACCTTACCCGCGGATTCCCGATGTAGACTGTTATAGGGCGTTGGGTACGGTAGCATGGGCAACTAGGAACTAAAACATGAATCTTTTCCGAAGGGTGTCGGATACGCATACGCGCCCACACTCGGAAGTAGCTAGTGCCGTCAGGGGGTACTGTTTACGAGGGGCATAACGCTCGGTCCGTACCTGACAATCCAGCGACTTAGCAGGGCCGCCTTGACGAGACTGTGGGACCGGTGCTAGGCGCACTTAGCGGTACACCGCGTGTTACCTAGAAGGTGATCCTGCC')
# Allineamento globale
print("=== Allineamento Globale ===")
global_alignments = aligner.global_alignment()
print(aligner.format_alignment(global_alignments, n=1))

# Allineamento locale
print("=== Allineamento Locale ===")
local_alignments = aligner.local_alignment()
print(aligner.format_alignment(local_alignments, n=1))

print('n'*190)

aligner = SequenceAlignment(DataFrame.loc[27, 'Sequence'], DataFrame.loc[99, 'Sequence'])
# Allineamento globale
print("=== Allineamento Globale ===")
global_alignments = aligner.global_alignment()
print(aligner.format_alignment(global_alignments, n=1))

# Allineamento locale
print("=== Allineamento Locale ===")
local_alignments = aligner.local_alignment()
print(aligner.format_alignment(local_alignments, n=1))
