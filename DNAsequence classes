class Sequence:
    def __init__(self, sequence): 
        self.__sequence = sequence

    def length(self):
        return len(self.__sequence)

    def get_seq (self):
        return self.__sequence

    def set_seq(self, new_seq):
        self.__sequence = new_seq

class DNASequence(Sequence):

    def gc_content(self):
        gc_count = self.__sequence.count("G") + self.__sequence.count("C")
        return (gc_count / len(self.__sequence)) * 100 if self.__sequence else 0.0

    def extract_subsequence(self, start, end):
        """
        Estrae una sottosequenza dalla sequenza DNA.
        
        :param start: Indice iniziale (inclusivo).
        :param end: Indice finale (esclusivo).
        :return: La sottosequenza estratta come stringa.
        :raises ValueError: Se gli indici sono fuori dai limiti.
        """
        if start < 0 or end > len(self.__sequence) or start >= end:
            raise ValueError("Gli indici forniti sono invalidi.")
        return self.__sequence[start:end]

