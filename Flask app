# Flask app
app = Flask(__name__)

@app.route("/")
def main():
    return 

# Variabili globali per i dati caricati
uploaded_data_path = None
fasta_data = None

@app.route("/")
def index():
    return render_template("index.html")


@app.route("/upload", methods=["POST"])
def upload():
    global fasta_data, uploaded_data_path
    file = request.files.get("file")
    if not file:
        return "No file uploaded!", 400

    # Salva il file caricato in una posizione temporanea
    uploaded_data_path = "uploaded_file.fasta"
    file.save(uploaded_data_path)

    parser = FastaParser()
    parser.parse(uploaded_data_path)  # Parsing dal file salvato, ma ritornando None non posso scrivere fasta_data = lui, quindi chiamo solo la funzione 
    fasta_data = parser.get_DataFrame # Ã¨ un DataFrame 
    return redirect(url_for("stats"))


@app.route("/stats")
def stats():
    global fasta_data
    if fasta_data is None:
        return redirect(url_for("index"))

    # Calcola statistiche per ogni sequenza
    stats = []
    for _, row in fasta_data.iterrows():
        dna_seq = DNASequence(row["Sequence"])
        stats.append({
            "ID": row["ID"],
            "Description": row["Description"],
            "Length": dna_seq.length(),
            "GC Content": f"{dna_seq.gc_content():.2f}%"
        })

    return render_template("stats.html", stats=stats)


@app.route("/motif", methods=["GET", "POST"])
def motif():
    global fasta_data
    if fasta_data is None:
        return redirect(url_for("index"))

    results = None
    motif = None

    if request.method == "POST":
        motif = request.form.get("motif")
        analyser = MotifAnalyser(fasta_data["Sequence"].tolist())
        results = analyser.search_motif(motif)

    return render_template("motif.html", results=results, motif=motif)


@app.route("/align", methods=["GET", "POST"])
def align():
    global fasta_data
    if fasta_data is None:
        return redirect(url_for("index"))

    alignment_result = None
    seq1_index = None
    seq2_index = None

    if request.method == "POST":
        seq1_index = int(request.form.get("seq1"))
        seq2_index = int(request.form.get("seq2"))
        seq1 = fasta_data.iloc[seq1_index]["Sequence"]
        seq2 = fasta_data.iloc[seq2_index]["Sequence"]

        aligner = SequenceAligner(seq1, seq2)
        alignment_result = aligner.align()[0]  # Prendi il miglior allineamento

    return render_template(
        "align.html",
        alignment_result=alignment_result,
        fasta_data=fasta_data,
        seq1_index=seq1_index,
        seq2_index=seq2_index
    )
if __name__ == "__main__":
    app.run(debug=True)
