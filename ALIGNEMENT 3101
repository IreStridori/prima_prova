from Bio.Align import PairwiseAligner
import pandas as pd
from abc import ABC, abstractmethod

# Decoratore per validare la presenza del dataset caricato
def ensure_data_loaded(func):
    def wrapper(self, *args, **kwargs):
        if self.data is None:
            raise ValueError("Nessun dataset caricato. Caricare un file FASTA prima di eseguire l'operazione.")
        return func(self, *args, **kwargs)
    return wrapper

# Classe per l'allineamento
class SequenceAlignment:
    def __init__(self, seq1, seq2):
        """Inizializza l'oggetto di allineamento con due sequenze."""
        self.seq1 = seq1
        self.seq2 = seq2
        self.aligner = PairwiseAligner()
        self.aligner.mode = 'global'  # Imposta l'allineamento globale di default

    def global_alignment(self):
        """Esegue l'allineamento globale utilizzando il metodo di Needleman-Wunsch."""
        self.aligner.mode = 'global'
        alignments = self.aligner.align(self.seq1, self.seq2)
        return alignments

    def local_alignment(self):
        """Esegue l'allineamento locale utilizzando il metodo di Smith-Waterman."""
        self.aligner.mode = 'local'
        alignments = self.aligner.align(self.seq1, self.seq2)
        return alignments

    def format_alignment(self, alignments, n=1):
        """Formatta e restituisce i primi N risultati di allineamento."""
        results = []
        for alignment in alignments[:n]:
            results.append(str(alignment))
        return "\n".join(results)

# Sequenze di esempio
seq1 = "GATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGG"
seq2 = "GAGCCCGTCTAAACTCCTCTATGTGTCTATGTCCTTGCTTTGGCGGTTTAGCCTTCACAGATCACCAACG"

# Creazione dell'oggetto di allineamento
aligner = SequenceAlignment(seq1, seq2)

# Allineamento globale
print("=== Allineamento Globale ===")
global_alignments = aligner.global_alignment()
print(aligner.format_alignment(global_alignments, n=1))

# Allineamento locale
print("=== Allineamento Locale ===")
local_alignments = aligner.local_alignment()
print(aligner.format_alignment(local_alignments, n=1))
